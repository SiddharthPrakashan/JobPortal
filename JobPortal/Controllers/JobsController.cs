using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using JobPortal.Models;
using JobPortal.WebModels;
using System.Xml.Linq;
using JobPortal.WebModels.JobWebModels;
using JobPortal.WebModels.DepartmentWebModels;
using JobPortal.WebModels.LocationWebModels;
using System.Net;
using Microsoft.AspNetCore.Authorization;

namespace JobPortal.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/v{version:apiVersion}/[controller]")]
    [ApiVersion("1.0")]
    public class JobsController : ControllerBase
    {
        private readonly SQLServerDBContext _context;

        public JobsController(SQLServerDBContext context)
        {
            _context = context;
        }

        /// <summary>
        /// GET: api/v1/Jobs
        /// Get all Jobs
        /// </summary>
        /// <returns>List of Jobs</returns>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Job>>> GetJobs()
        {
            try
            {
                return await _context.Jobs.Include("Department").Include("Location").OrderByDescending(i => i.PostedDate).ToListAsync();
            }
            catch(Exception ex)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error retrieving job list");
            }
        }

        /// <summary>
        /// GET: api/v1/Jobs/1
        /// Get Job by ID  
        /// </summary>
        /// <param name="id"></param>
        /// <returns>Job object</returns>
        [HttpGet("{id:int}")]
        public async Task<ActionResult<GetJobResponseWebModel>> GetJob(int id)
        {
            try
            {
                var job = await _context.Jobs.Include("Department").Include("Location").FirstOrDefaultAsync(i => i.JobId == id);

                if (job == null)
                {
                    return NotFound($"Job with ID = {id} not found");
                }

                return new GetJobResponseWebModel
                {
                    Id = job.JobId,
                    Code = job.Code,
                    Title = job.Title,
                    Description = job.Description,
                    PostedDate = job.PostedDate,
                    ClosingDate = job.ClosingDate,
                    Department = job.Department == null ? null : new GetDepartmentResponseWebModel
                    {
                        Id = job.Department.DepartmentId,
                        Title = job.Department?.Title,
                    },
                    Location = job.Location == null ? null : new GetLocationResponseWebModel
                    {
                        Id = job.Location.LocationId,
                        Title = job.Location?.Title,
                        City = job.Location?.City,
                        State = job.Location?.State,
                        Country = job.Location?.Country,
                        Zip = job.Location?.Zip,
                    },
                };
            }
            catch (Exception ex)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error retrieving job");
            }         
        }

        /// <summary>
        /// Put: api/v1/Jobs/1
        /// Update Job by ID
        /// </summary>
        /// <param name="id"></param>
        /// <param name="updateJob"></param>
        /// <returns></returns>
        [HttpPut("{id:int}")]
        public async Task<IActionResult> PutJob(int id, UpdateJobRequestWebModel updateJob)
        {
            try
            {
                var jobToUpdate = await _context.Jobs.FindAsync(id);

                if(jobToUpdate == null)
                    return NotFound($"Job with ID = {id} not found");

                jobToUpdate.Title = updateJob.Title;
                jobToUpdate.Description = updateJob.Description;
                if(updateJob.LocationId != 0)
                {
                    jobToUpdate.LocationId = updateJob.LocationId;
                }
                if (updateJob.DepartmentId != 0)
                {
                    jobToUpdate.DepartmentId = updateJob.DepartmentId;
                }
                jobToUpdate.ClosingDate = updateJob.ClosingDate;

                await _context.SaveChangesAsync();

                return Ok();
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error updating job");
            }        
        }

        /// <summary>
        /// POST: api/Jobs
        /// Create Job
        /// Job Code will be auto generated by SQL trigger after insert.
        /// </summary>
        /// <param name="createJob"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ActionResult<GetJobResponseWebModel>> PostJob(CreateJobRequestWebModel createJob)
        {
            try
            {
                var newJob = new Job
                {
                    Title = createJob.Title,
                    Description = createJob.Description,
                    LocationId = createJob.LocationId,
                    DepartmentId = createJob.DepartmentId,
                    ClosingDate = Convert.ToDateTime(createJob.ClosingDate).ToUniversalTime(),
                    PostedDate = DateTime.UtcNow,
                };

                _context.Jobs.Add(newJob);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetJob), new { id = newJob.JobId }, null);
            }
            catch (Exception ex)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error creating job");
            } 
        }

        /// <summary>
        /// DELETE: api/Jobs/5
        /// Delete Job by ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> DeleteJob(int id)
        {
            try
            {
                var jobToDelete = await _context.Jobs.FindAsync(id);
                if (jobToDelete == null)
                {
                    return NotFound($"Job with ID = {id} not found");
                }

                _context.Jobs.Remove(jobToDelete);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error deleting job");
            }           
        }

        /// <summary>
        /// POST: api/Jobs/List
        /// Gets list of Jobs filtered by query model: page no, page size, query string, department ID, location ID.
        /// </summary>
        /// <param name="listWebModel"></param>
        /// <returns>Total count, List of Jobs</returns>
        [AllowAnonymous]
        [HttpPost("List")]
        public async Task<ActionResult<ListJobResponseWebModel>> ListJobs(ListDataRequestWebModel listWebModel)
        {
            try
            {
                if (listWebModel.PageNo < 1)
                    return BadRequest("Page Number cannot be less than 1");

                if (listWebModel.PageSize < 1)
                    return BadRequest("Page Size cannot be less than 1");

                int pageNo = listWebModel.PageNo - 1;
                int pageSize = listWebModel.PageSize;

                IQueryable<Job> query = _context.Jobs.Include("Department").Include("Location").OrderByDescending(i => i.PostedDate);

                string queryString = listWebModel.Q == null ? String.Empty : listWebModel.Q.Trim().ToLower();

                if (!string.IsNullOrEmpty(listWebModel.Q))
                {
                    query = query.Where(e => (e.Code == null ? false : e.Code.ToLower().Contains(queryString)) ||
                                        (e.Title == null ? false : e.Title.ToLower().Contains(queryString)) ||
                                        (e.Location == null ? false : (e.Location.Title == null ? false : e.Location.Title.ToLower().Contains(queryString))) ||
                                        (e.Department == null ? false : (e.Department.Title == null ? false : e.Department.Title.ToLower().Contains(queryString))));
                }

                if (listWebModel.LocationId != null)
                {
                    query = query.Where(e => e.LocationId == listWebModel.LocationId);
                }

                if (listWebModel.DepartmentId != null)
                {
                    query = query.Where(e => e.DepartmentId == listWebModel.DepartmentId);
                }

                var result = await query.ToListAsync();

                return new ListJobResponseWebModel
                {
                    Total = result.Count,
                    Data = result.Skip(pageNo * pageSize).Take(pageSize).Select(job => new GetJobResponseWebModelMinimal
                    {
                        Id = job.JobId,
                        Code = job.Code,
                        Title = job.Title,
                        PostedDate = job.PostedDate,
                        ClosingDate = job.ClosingDate,
                        Department = job.Department?.Title ?? "",
                        Location = job.Location?.Title ?? ""
                    })
                };
            }
            catch (Exception ex)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError, "Error retrieving job list");
            }   
        }
    }
}
